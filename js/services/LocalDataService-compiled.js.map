{"version":3,"sources":["LocalDataService.js"],"names":[],"mappings":"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","file":"LocalDataService-compiled.js","sourcesContent":["(function() {\r\n    'use strict';\r\n    angular.module('myApp.services', ['LocalStorageModule']);\r\n    angular.module('myApp.services').factory('LocalDataService', LocalDataService);\r\n    /**\r\n     * @ngdoc service\r\n     * @name LocalDataService\r\n     * @description Handles storing and retrieving data for the app,\r\n     * ``` uses both localStorage and backup JSON files ```\r\n     * @class\r\n     * @param localStorageService\r\n     * @returns {LocalDataService}\r\n     * @constructor\r\n     */\r\nfunction LocalDataService(localStorageService) {\r\n\r\n    this.localStorageService = localStorageService;\r\n    /**\r\n     * Bootstrap data load.\r\n     * @optional globalData Pass in backup data for fallback\r\n     * @returns {{videos, compics}}\r\n     */\r\n    this.startup = function(globalData)\r\n    {\r\n        var videos = this.loadData({name: \"videos\"}), compics = this.loadData({name: \"compics\"});\r\n\r\n        //If there is a problem with the local data get the backup data\r\n        if(!videos || !compics)\r\n        {\r\n            console.log(\"localStorage data invalid, falling back to backup data.\")\r\n            videos = globalData.videos;\r\n            compics = globalData.compics;\r\n            this.saveData({name: \"videos\", data: videos});\r\n            this.saveData({name: \"compics\", data: compics});\r\n        }\r\n\r\n            return {\r\n                videos: videos,\r\n                compics: compics\r\n            };\r\n\r\n        };\r\n\r\n\r\n        /**\r\n         * Retrieves data from localStorage\r\n         * @name loadData\r\n         * @function\r\n         * @param {{name: string}} options\r\n         * @returns {json}\r\n         */\r\n        this.getLocalData = function(options) {\r\n            //Check name\r\n            if(options !== Object(options)) {\r\n                console.error(\"This function only accepts a single parameter as an options object.\");\r\n                return false;\r\n            }\r\n            var name = options.name;\r\n\r\n            var result = this.localStorageService.get(name);\r\n                if(result !== null) {\r\n                    //angular-local-storage returns a null object if not found.\r\n                    return result;\r\n                }\r\n\r\n            console.warn(\"Local storage object \" + name + \" does not exist\");\r\n            return false;\r\n\r\n\r\n        };\r\n\r\n        /**\r\n         * @memberof LocalDataService\r\n         * @name saveData\r\n         * @function\r\n         * @param {{name: string, data: Object}} options\r\n         *\r\n         * @returns {Function}\r\n         *\r\n         */\r\n       this.setLocalData = function(options) {\r\n\r\n                //Check name\r\n                if (options !== Object(options)) {\r\n                    console.error(\"This function only accepts a single parameter as an options object.\");\r\n                    console.log(options);\r\n                    return false;\r\n                }\r\n\r\n                /* The key to use on the localStorage object */\r\n                var name = options.name;\r\n                var data = options.data;\r\n\r\n                //Store in localStorage\r\n                try {\r\n                    this.localStorageService.set(name, data);\r\n                    return data;\r\n                } catch (e) {\r\n                    console.log(\"Error saving to localStorage. \" + e.message);\r\n                    console.log(obj);\r\n                    console.log(data);\r\n                    return false;\r\n                }\r\n\r\n\r\n            };\r\n\r\n\r\n            this.saveData = function(options)\r\n            {\r\n                return this.setLocalData(options);\r\n            };\r\n\r\n            this.loadData = function(options)\r\n            {\r\n                return this.getLocalData(options);\r\n            };\r\n\r\n            this.$inject = ['localStorageService'];\r\n\r\n    return this;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n})();\r\n\r\n\r\n\r\n\r\n"]}