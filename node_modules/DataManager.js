/*! DataManager.js*/
(function () {
    var fs, path, primaryFilePath, backupFilePath;

    fs = require('fs');
    path = require('path');

    //Constants
    primaryVideoData = path.join(process.cwd(), "/data/videoData.json");
    backupVideoData = path.join(process.cwd(), "/data/backup/videoData.bak.json");
    primaryCompicData = path.join(process.cwd(), "/data/compicData.json");
    backupCompicData = path.join(process.cwd(), "/data/backup/compicData.bak.json");


    /**
     * Custom Exception
     * @param message
     * @constructor
     */
    function UserException(message) {
        this.message = message;
        this.name = "UserException";
    }

    function loadJson(filePath) {

        if (fs.existsSync(filePath)) {
            try {
                return JSON.parse(fs.readFileSync(filePath, {encoding: 'utf8'}));
            } catch (e) {
                console.log(e.message);
                throw new UserException("The File is corrupt. This is awkward.");
            }
        } else {
            throw new UserException(filePath + " does not exist.");
        }


    }

    function loadBackup(filePath) {
        console.log("Attempting to restore from backup...");

        try {

            return loadJson(filePath)
        }

        catch (e) {
            console.error(e.message);
            throw new UserException("Both the Primary and Backup Data Files are missing or corrupt... She's dead Jim.")
        }
    }

    module.exports = {
        load: function (primaryFilePath, backupFilePath) {

            try {

                return loadJson(primaryFilePath);

            } catch (e) {

                console.error(e.message);
                try {
                    var backupData = loadBackup(backupFilePath);

                    //Restore the dataFile
                    this.save(backupData, primaryFilePath);
                    console.log("Restore from backup successful.");

                    return backupData;
                } catch (e) {
                    console.error(e.message);
                    return false;
                }


            }

        },
        save: function (data, pFilePath, backup) {
            backup = backup || false;
            fs.writeFileSync(pFilePath, JSON.stringify(data, {}, "\t"), {encoding: 'utf-8', flag: 'w'});
            if (backup) {
                this.backup(data, bFilePath);
            }


        },
        backup: function (data, filePath) {
            //this is hideous, clean it up someday.
            bFilePath = path.normalize(
                path.join(
                    path.relative(process.cwd(), path.join(path.dirname(filePath), "backup/")),
                    path.basename(filePath, path.extname(filePath)) + ".bak.json"
                )
            );
            fs.writeFileSync(filePath, JSON.stringify(data, {}, "\t"), {encoding: 'utf-8', flag: 'w'});
        },
        loadVideoData: function () {
            console.log("Attempting to load video data from: " + primaryVideoData);
            var result = this.load(primaryVideoData, backupVideoData);
            return result;
        },
        loadCompicData: function () {
            console.log("Attempting to load video data from: " + primaryCompicData);
            var result = this.load(primaryCompicData, backupCompicData);
            return result;
        }

    }
})();



