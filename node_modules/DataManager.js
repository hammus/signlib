// Generated by CoffeeScript 1.8.0
var fs, path, primaryFilePath, backupFilePath;

fs = require('fs');
path = require('path');

//Constants
primaryFilePath = path.join(process.cwd(), "data.json");
backupFilePath = path.join(process.cwd(), "/data/dataBackup.json");


/**
 * Custom Exception
 * @param message
 * @constructor
 */
function UserException(message) {
    this.message = message;
    this.name = "UserException";
}

function loadJson(filePath) {

    if (fs.existsSync(filePath)) {
        try {
            return JSON.parse(fs.readFileSync(filePath, {encoding: 'utf8'}));
        } catch (e) {
            console.log(e.message);
            throw new UserException("The File is corrupt. This is awkward.");
        }
    } else {
        throw new UserException(filePath + " does not exist.");
    }


}

function loadBackup(filePath) {
    console.log("Attempting to restore from backup...");

    try {

        return loadJson(filePath)
    }

    catch (e) {
        console.error(e.message);
        throw new UserException("Both the Primary and Backup Data Files are missing or corrupt... She's dead Jim.")
    }
}

module.exports = {
    load: function () {
        try {

            return loadJson(primaryFilePath);

        } catch (e) {

            console.error(e.message);
            try {
                var backupData = loadBackup(backupFilePath);

                //Restore the dataFile
                this.save(backupData, primaryFilePath);
                console.log("Restore from backup successful.");

                return backupData;
            } catch (e) {
                console.error(e.message);
                return false;
            }


        }

    },
    save: function (data) {
        filePath = primaryFilePath;
        fs.writeFileSync(filePath, JSON.stringify(data, {}, "\t"), {encoding: 'utf-8', flag: 'w'});
        this.backup(data);
    },
    backup: function(data) {
        filePath = backupFilePath;
        fs.writeFileSync(filePath, JSON.stringify(data, {}, "\t"), {encoding: 'utf-8', flag: 'w'});
    }

}



