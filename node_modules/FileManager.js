/**
 * FileManager - gets the apps video files and returns a few convenience objects
 * @type {exports|module.exports}
 */

/***
 * Private
 */
var readDir = require('readdir'),
    path = require('path'),
    CONFIG = require('config'),
    fs = require('fs');


module.exports = {
    /* Gets the Path containing the folders from the config module */
    getVideoPath: function (video) {
        return path.join(path.normalize(CONFIG.folders.videoRoot), video);
    },

    /**
     * Filter files in a Directory by extensions provided in the second args array
     * @param {string} pathname
     * @param {array: string} extensions
     * @returns {array: string}
     */
    getFilesArray: function (pathname, extensions) {

        return readDir.readSync(pathname, extensions, readDir.ABSOLUTE_PATHS + readDir.CASELESS_SORT);

    },

    getFilesObject: function (filesArray) {

            return filesArray
                .map(function (file) {
                    return {
                        name: path.normalize(path.basename(file, path.extname(file))),
                        filename: path.normalize(path.basename(file)),
                        folder: path.relative(process.cwd(), path.dirname(file)),
                        path: path.normalize(path.relative(process.cwd(), file)),
                        tags: [],
                        categories: []
                    }
                });
        },

    /**
     * Get a Mapped object of the array
     * @returns {{videos: *}}
     * @constructor
     */
    getVideoData: function () {
        return this.getFilesObject(this.getFilesArray(this.config.folders.videoRoot, this.config.extensions.videos));

    }

    ,
    config: CONFIG,
    getCompics: function (options) {
        options = options || {color: "color"};
        return this.getFilesObject(this.getFilesArray(this.config.folders.compicsRoot[options.color], this.config.extensions.compics));

    },
    writeFile: function(file, data){
        fs.writeFileSync(file, data);
    }

}


